from tkinter import *
import numpy as np

root = Tk()
root.title("Matrix Calculator")
result=""
#root.geometry("1400x600")
matrixA = Label(root, text="Matrix A")
matrixB = Label(root, text="Matrix B")
matrixA.grid(row=0, column=1)
matrixB.grid(row=0, column=8)
a11 = Entry(root, width= 9, borderwidth=5)
a11.grid(row=1, column=0)
a12 = Entry(root, width= 9, borderwidth=5)
a12.grid(row=1, column=1)
a13 = Entry(root, width= 9, borderwidth=5)
a13.grid(row=1, column=2)
a21 = Entry(root, width= 9, borderwidth=5)
a21.grid(row=2, column=0)
a22 = Entry(root, width= 9, borderwidth=5)
a22.grid(row=2, column=1)
a23 = Entry(root, width= 9, borderwidth=5)
a23.grid(row=2, column=2)
a31 = Entry(root, width= 9, borderwidth=5)
a31.grid(row=3, column=0)
a32 = Entry(root, width= 9, borderwidth=5)
a32.grid(row=3, column=1)
a33 = Entry(root, width= 9, borderwidth=5)
a33.grid(row=3, column=2)
b11 = Entry(root, width= 9, borderwidth=5)
b11.grid(row=1, column=7)
b12 = Entry(root, width= 9, borderwidth=5)
b12.grid(row=1, column=8)
b13 = Entry(root, width= 9, borderwidth=5)
b13.grid(row=1, column=9)
b21 = Entry(root, width= 9, borderwidth=5)
b21.grid(row=2, column=7)
b22 = Entry(root, width= 9, borderwidth=5)
b22.grid(row=2, column=8)
b23 = Entry(root, width= 9, borderwidth=5)
b23.grid(row=2, column=9)
b31 = Entry(root, width= 9, borderwidth=5)
b31.grid(row=3, column=7)
b32 = Entry(root, width= 9, borderwidth=5)
b32.grid(row=3, column=8)
b33 = Entry(root, width= 9, borderwidth=5)
b33.grid(row=3, column=9)
root.grid_columnconfigure(4, minsize=100)
root.grid_columnconfigure(6, minsize=100)

def inverse():
    print("Matriisi on :")
    print(a11.get(),a12.get(),a13.get())
    print(a21.get(), a22.get(), a23.get())
    print(a31.get(),a32.get(),a33.get())
    result="K채채nn채 matriisi"
    matrix = np.array([[a11.get(),a12.get(),a13.get()],[a21.get(), a22.get(), a23.get()],[a31.get(),a32.get(),a33.get()]])
    print(np.linalg.inv(matrix))
def transpose():
    print("Transponoi")
    matrix = np.array([[a11.get(),a12.get(),a13.get()],[a21.get(), a22.get(), a23.get()],[a31.get(),a32.get(),a33.get()]])

def determinant():
    print("Determinantti")
    matrix = np.array([[a11.get(),a12.get(),a13.get()],[a21.get(), a22.get(), a23.get()],[a31.get(),a32.get(),a33.get()]])
def matrix_multiply():
    print("kerrotaan matriisit")
    matrixA = np.array([[a11.get(),a12.get(),a13.get()],[a21.get(), a22.get(), a23.get()],[a31.get(),a32.get(),a33.get()]])
    matrixB = np.array([[b11.get(),b12.get(),b13.get()],[b21.get(), b22.get(), b23.get()],[b31.get(),b32.get(),b33.get()]])
    print(matrixA, matrixB)
def matrix_add():
    print("matriisien yhteenlasku")

def matrix_subtract():
    print(" matriisien v채hennyslasku")

def flip_matrices():
    print("Vaihdetaan A ja B paikkaa")

button_inverse = Button(root, text="Inverse", width=7, command=inverse)
button_inverse.grid(row=4, column=1)
button_transpose = Button(root, text="Transpose", width=7, command=transpose)
button_transpose.grid(row=4, column=0)
button_determinant = Button(root, text="Determinant", width=7, command=determinant)
button_determinant.grid(row=4, column=2)
button_AxB = Button(root, text="A x B", width=7, command=matrix_multiply)
button_AxB.grid(row = 3, column=5)
button_A_add_B = Button(root, text="A + B", width=7, command=matrix_multiply)
button_A_add_B.grid(row = 4, column=5)
button_A_subs_B = Button(root, text="A - B", width=7, command=matrix_multiply)
button_A_subs_B.grid(row = 5, column=5)
button_flip_matrices= Button(root, text="Flip", width=7, command=flip_matrices)
button_flip_matrices.grid(row = 1, column=5)
button_clearA = Button(root, text="Clear", width=7)
button_clearA.grid(row=4, column=0)
button_size_up_matrixA = Button(root, text="+", width=7)
button_size_up_matrixA.grid(row=4, column=1)
button_size_down_matrixA = Button(root, text="-", width=7)
button_size_down_matrixA.grid(row=4, column=2)
button_clearB = Button(root, text="Clear", width=7)
button_clearB.grid(row=4, column=7)
button_size_up_matrixB = Button(root, text="+", width=7)
button_size_up_matrixB.grid(row=4, column=8)
button_size_down_matrixB = Button(root, text="-", width=7)
button_size_down_matrixB.grid(row=4, column=9)


root.mainloop()

