from tkinter import *
import numpy as np

root = Tk()
root.title("Matrix Calculator")
matrixA = Label(root, text="Matrix A")
matrixB = Label(root, text="Matrix B")

matrixA.grid(row=0, column=1)
matrixB.grid(row=0, column=8)

a11 = Entry(root, width= 9, borderwidth=5)
a11.grid(row=1, column=0)
a12 = Entry(root, width= 9, borderwidth=5)
a12.grid(row=1, column=1)
a13 = Entry(root, width= 9, borderwidth=5)
a13.grid(row=1, column=2)
a21 = Entry(root, width= 9, borderwidth=5)
a21.grid(row=2, column=0)
a22 = Entry(root, width= 9, borderwidth=5)
a22.grid(row=2, column=1)
a23 = Entry(root, width= 9, borderwidth=5)
a23.grid(row=2, column=2)
a31 = Entry(root, width= 9, borderwidth=5)
a31.grid(row=3, column=0)
a32 = Entry(root, width= 9, borderwidth=5)
a32.grid(row=3, column=1)
a33 = Entry(root, width= 9, borderwidth=5)
a33.grid(row=3, column=2)
b11 = Entry(root, width= 9, borderwidth=5)
b11.grid(row=1, column=7)
b12 = Entry(root, width= 9, borderwidth=5)
b12.grid(row=1, column=8)
b13 = Entry(root, width= 9, borderwidth=5)
b13.grid(row=1, column=9)
b21 = Entry(root, width= 9, borderwidth=5)
b21.grid(row=2, column=7)
b22 = Entry(root, width= 9, borderwidth=5)
b22.grid(row=2, column=8)
b23 = Entry(root, width= 9, borderwidth=5)
b23.grid(row=2, column=9)
b31 = Entry(root, width= 9, borderwidth=5)
b31.grid(row=3, column=7)
b32 = Entry(root, width= 9, borderwidth=5)
b32.grid(row=3, column=8)
b33 = Entry(root, width= 9, borderwidth=5)
b33.grid(row=3, column=9)
root.grid_columnconfigure(4, minsize=100)
root.grid_columnconfigure(6, minsize=100)

def inverse():
    matrixA = np.array([[float(a11.get()),float(a12.get()),float(a13.get())],[float(a21.get()), float(a22.get()), float(a23.get())],[float(a31.get()),float(a32.get()),float(a33.get())]])
    matrixInvLabel = Label(root, text=matrixA)
    matrixInvLabel.grid(row = 9, column=5)

def transpose_matrixA():
    matrixA = np.array([[float(a11.get()),float(a12.get()),float(a13.get())],[float(a21.get()), float(a22.get()), float(a23.get())],[float(a31.get()),float(a32.get()),float(a33.get())]])
    matrixTrans = matrixA.transpose()
    matrixTransLabel = Label(root, text=matrixTrans)
    matrixTransLabel.grid(row = 9, column=5)

def determinant():
    matrixA = np.array([[float(a11.get()),float(a12.get()),float(a13.get())],[float(a21.get()), float(a22.get()), float(a23.get())],[float(a31.get()),float(a32.get()),float(a33.get())]])
    matrix_detA = np.linalg.det(matrixA)
    matrixDet= Label(root, text="")
    matrixDet= Label(root, text=matrix_detA)
    matrixDet.grid(row=9, column=5)

def matrix_multiply():
    matrixA = np.array([[float(a11.get()),float(a12.get()),float(a13.get())],[float(a21.get()), float(a22.get()), float(a23.get())],[float(a31.get()),float(a32.get()),float(a33.get())]])
    matrixB = np.array([[float(b11.get()),float(b12.get()),float(b13.get())],[float(b21.get()), float(b22.get()), float(b23.get())],[float(b31.get()),float(b32.get()),float(b33.get())]])
    multiplication = np.matmul(matrixA, matrixB)
    matrixMul= Label(root, text="")
    matrixMul= Label(root, text=multiplication)
    matrixMul.grid(row=9, column=5)

def matrix_add():
    matrixA = np.array([[float(a11.get()),float(a12.get()),float(a13.get())],[float(a21.get()), float(a22.get()), float(a23.get())],[float(a31.get()),float(a32.get()),float(a33.get())]])
    matrixB = np.array([[float(b11.get()),float(b12.get()),float(b13.get())],[float(b21.get()), float(b22.get()), float(b23.get())],[float(b31.get()),float(b32.get()),float(b33.get())]])
    matrixAddition = matrixA + matrixB
    matrixAdditionLabel = Label(root, text=matrixAddition)
    matrixAdditionLabel.grid(row=9, column=5)
    

def matrix_subtract():
    matrixA = np.array([[float(a11.get()),float(a12.get()),float(a13.get())],[float(a21.get()), float(a22.get()), float(a23.get())],[float(a31.get()),float(a32.get()),float(a33.get())]])
    matrixB = np.array([[float(b11.get()),float(b12.get()),float(b13.get())],[float(b21.get()), float(b22.get()), float(b23.get())],[float(b31.get()),float(b32.get()),float(b33.get())]])
    matrixSubstraction = matrixA - matrixB
    matrixSubstractionLabel = Label(root, text=matrixSubstraction)
    matrixSubstractionLabel.grid(row=9, column=5)

def flip_matrices():
    temp = np.array([[float(b11.get()),float(b12.get()),float(b13.get())],[float(b21.get()), float(b22.get()), float(b23.get())],[float(b31.get()),float(b32.get()),float(b33.get())]])
    b11.delete(0, END)
    b12.delete(0, END)
    b13.delete(0, END)
    b21.delete(0, END)
    b22.delete(0, END)
    b23.delete(0, END)
    b31.delete(0, END)
    b32.delete(0, END)
    b33.delete(0, END)
    b11.insert(0, float(a11.get()))
    b12.insert(0, float(a12.get()))
    b13.insert(0, float(a13.get()))
    b21.insert(0, float(a21.get()))
    b22.insert(0, float(a22.get()))
    b23.insert(0, float(a23.get()))
    b31.insert(0, float(a31.get()))
    b32.insert(0, float(a32.get()))
    b33.insert(0, float(a33.get()))

    a11.delete(0, END)
    a12.delete(0, END)
    a13.delete(0, END)
    a21.delete(0, END)
    a22.delete(0, END)
    a23.delete(0, END)
    a31.delete(0, END)
    a32.delete(0, END)
    a33.delete(0, END)
    a11.insert(0, temp[0][0])
    a12.insert(0, temp[0][1])
    a13.insert(0, temp[0][2])
    a21.insert(0, temp[1][0])
    a22.insert(0, temp[1][1])
    a23.insert(0, temp[1][2])
    a31.insert(0, temp[2][0])
    a32.insert(0, temp[2][1])
    a33.insert(0, temp[2][2])
    
def clearA():
    a11.delete(0, END)
    a12.delete(0, END)
    a13.delete(0, END)
    a21.delete(0, END)
    a22.delete(0, END)
    a23.delete(0, END)
    a31.delete(0, END)
    a32.delete(0, END)
    a33.delete(0, END)

def clearB():
    b11.delete(0, END)
    b12.delete(0, END)
    b13.delete(0, END)
    b21.delete(0, END)
    b22.delete(0, END)
    b23.delete(0, END)
    b31.delete(0, END)
    b32.delete(0, END)
    b33.delete(0, END)

button_inverse = Button(root, text="Inv(A)", width=7, command=inverse)
button_inverse.grid(row=6, column=1)
button_transpose = Button(root, text="Trans(A)", width=7, command=transpose_matrixA)
button_transpose.grid(row=6, column=0)
button_determinant = Button(root, text="Det(A)", width=7, command=determinant)
button_determinant.grid(row=6, column=2)
button_AxB = Button(root, text="A x B", width=7, command=matrix_multiply)
button_AxB.grid(row = 3, column=5)
button_A_add_B = Button(root, text="A + B", width=7, command=matrix_add)
button_A_add_B.grid(row = 4, column=5)
button_A_subs_B = Button(root, text="A - B", width=7, command=matrix_subtract)
button_A_subs_B.grid(row = 5, column=5)
button_flip_matrices= Button(root, text="Flip", width=7, command=flip_matrices)
button_flip_matrices.grid(row = 1, column=5)
button_clearA = Button(root, text="Clear", width=7, command=clearA)
button_clearA.grid(row=4, column=0)
button_size_up_matrixA = Button(root, text="+", width=7)
button_size_up_matrixA.grid(row=4, column=1)
button_size_down_matrixA = Button(root, text="-", width=7)
button_size_down_matrixA.grid(row=4, column=2)
button_clearB = Button(root, text="Clear", width=7, command=clearB)
button_clearB.grid(row=4, column=7)
button_size_up_matrixB = Button(root, text="+", width=7)
button_size_up_matrixB.grid(row=4, column=8)
button_size_down_matrixB = Button(root, text="-", width=7)
button_size_down_matrixB.grid(row=4, column=9)


root.mainloop()

